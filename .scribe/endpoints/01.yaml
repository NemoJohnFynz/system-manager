name: Authentication
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/login
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Log in a user.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: '{YOUR_JWT_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      /api/login:
        name: /api/login
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      /api/login: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      username:
        name: username
        description: 'Username of the user.'
        required: true
        example: nemo
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Password for the user.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      username: nemo
      password: password123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "token": "jwt-token-here"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "status": "error",
            "message": "username or password is incorrect"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "status": "error",
            "message": "Could not create token"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer {YOUR_JWT_TOKEN}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/getuser
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get the authenticated user.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: '{YOUR_JWT_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      /api/getAuthenticatedUser:
        name: /api/getAuthenticatedUser
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      /api/getAuthenticatedUser: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "user": {
              "username": "demo",
              "email": "demo@example.com",
              "fullName": "Demo User",
              "phone_number": "0123456789"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "token_absent"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "user_not_found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer {YOUR_JWT_TOKEN}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: api/updateuser
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Update the authenticated user's details."
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: '{YOUR_JWT_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      /api/updateUser:
        name: /api/updateUser
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      /api/updateUser: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      fullName:
        name: fullName
        description: 'optional Full name of the user.'
        required: false
        example: 'Uchiha Nemo'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'optional Email of the user.'
        required: false
        example: uchihanemo@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone_number:
        name: phone_number
        description: 'optional Phone number of the user.'
        required: false
        example: '0123456789'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      fullName: 'Uchiha Nemo'
      email: uchihanemo@gmail.com
      phone_number: '0123456789'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "User updated successfully.",
            "users": {
              "username": "demo",
              "email": "uchihanemo@gmail.com",
              "fullName": "Uchiha Nemo",
              "phone_number": "0123456789"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "status": "error",
            "message": "Validation failed.",
            "errors": {
              "email": ["The email has already been taken."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "status": "error",
            "message": "Token is absent or could not be parsed."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "status": "error",
            "message": "Validation failed.",
            "errors": {
              "fullName": ["The fullName field is invalid."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "status": "error",
            "message": "Failed to update user."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer {YOUR_JWT_TOKEN}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: api/changepassword
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Change the authenticated user's password."
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: '{YOUR_JWT_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      /api/changePassword:
        name: /api/changePassword
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      /api/changePassword: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: 'Current password of the user.'
        required: true
        example: oldpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: 'New password of the user (min: 8 characters).'
        required: true
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      current_password: oldpassword123
      new_password: newpassword123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "success",
            "message": "Password changed successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "status": "error",
            "message": "Current password is incorrect."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "token_absent"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "user_not_found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer {YOUR_JWT_TOKEN}'
    controller: null
    method: null
    route: null
    custom: []
